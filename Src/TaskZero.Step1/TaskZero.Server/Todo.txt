====================
TASKZERO.STEP 1
====================

1) To start off, set the version number of the demo. Open **TaskZeroSettings.cs** and change the **Version** constant to 1.

2) Add the following Nuget packages on the TaskZero.Server project
    MementoFX
    MementoFX.Persistence.MongoDB
    MementoFX.Messaging.Postie
    MementoFX.Messaging.Postie.Unity

3) Now let's set up the framework at the start of the application. Create a new file **MementoStartup.cs** in the root of the project and copy the C# code below in it.

using System;
using Memento.Messaging;
using Memento.Messaging.Postie;
using Memento.Messaging.Postie.Unity;
using Memento.Persistence;
using Microsoft.Practices.Unity;

namespace TaskZero.Server
{
    public class MementoStartup
    {
        public static UnityContainer UnityConfig(Type busType, Type eventStoreType)
        {
            var container = new UnityContainer();
            container.RegisterType<ITypeResolver, UnityTypeResolver>
    (new InjectionConstructor(container));
    container.RegisterType(typeof(IBus), busType);
    container.RegisterType(typeof(IEventDispatcher), busType);
    container.RegisterType<IRepository, Repository>
        (new InjectionConstructor(eventStoreType));
        container.RegisterType(typeof(IEventStore),
        eventStoreType,
        new InjectionConstructor(typeof(IEventDispatcher)));

        return container;
        }

        public static UnityContainer UnityConfig<TBus, TEventStore>
            ()
            {
            var container = new UnityContainer();

            container.RegisterType<ITypeResolver, UnityTypeResolver>
                (new InjectionConstructor(container));
                container.RegisterType(typeof(IBus), typeof(TBus));
                container.RegisterType(typeof(IEventDispatcher), typeof(TBus));
                container.RegisterType<IRepository, Repository>
                    (new InjectionConstructor(typeof(TEventStore)));
                    container.RegisterType(typeof(IEventStore), typeof(TEventStore),
                    new InjectionConstructor(typeof(IEventDispatcher)));

                    return container;
                    }
                    }
                    }
    
    4) Add the following properties to the **global.asax.cs** class
    
       public static IBus Bus { get; private set; }
       public static IRepository AggregateRepository { get; private set; }

    5) Add the following code at the end of Application_Start in **global.asax.cs**. This code will initialize the MementoFX framework.

    // Configure the MementoFX
    var container = MementoStartup.UnityConfig<InMemoryBus, MongoDbEventStore>();

    // Save global references to the FX core elements
    Bus = container.Resolve<IBus>();
    AggregateRepository = container.Resolve<IRepository>();
    
    // Add sagas and handlers to the bus

    6) Import all namespaces and make sure you also have 

    using Microsoft.Practices.Unity;

    7) Create a folder **Commands** in the **TaskZero.CommandStack** project.

    8) Create a C# file in the folder: **NotifyCommand.cs**. Make sure you import all references. In particular, you need to reference **Memento**.

    using Memento;

    namespace TaskZero.CommandStack.Commands
    {
    public class NotifyCommand : Command
    {
    public NotifyCommand(string connectionId = "")
    {
    SignalrConnectionId = connectionId;
    }

    public string SignalrConnectionId { get; }
    }
    }

    9) Create a C# file in the folder: **AddNewTaskCommand.cs**. In particular, you need to reference **TaskZero.Shared**.

    using System;
    using TaskZero.Shared;

    namespace TaskZero.CommandStack.Commands
    {
    public class AddNewTaskCommand : NotifyCommand
    {
    public AddNewTaskCommand(string title,
    string description,
    DateTime? dueDate,
    Priority priority,
    string connectionId) : base(connectionId)
    {
    Title = title;
    Description = description;
    DueDate = dueDate;
    Priority = priority;
    }

    public string Title { get; set; }
    public string Description { get; set; }
    public DateTime? DueDate { get; set; }
    public Priority Priority { get; set; }
    }
    }

    10) Create a folder Events in **TaskZero.Shared** and add **TaskCreatedEvent.cs**. Reference MementoFX.
	
	using System;
using Memento;

namespace TaskZero.Shared.Events
{
    public class TaskCreatedEvent : DomainEvent
    {
        public TaskCreatedEvent(Guid id, string title, string description, DateTime? dueDate, Priority priority)
        {
            TaskId = id;
            Title = title;
            Description = description;
            DueDate = dueDate;
            Priority = priority;
        }

        public Guid TaskId { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime? DueDate { get; set; }
        public Priority Priority { get; set; }
    }
}


11) Create a folder **Model** in the **TaskZero.CommandStack** project and create a **Task.cs** file in it.

using System;
using Memento.Domain;
using TaskZero.Shared;
using TaskZero.Shared.Events;

namespace TaskZero.CommandStack.Model
{
    public class Task : Aggregate, IApplyEvent<TaskCreatedEvent>
    {
        public Task()
        {
            Priority = Priority.Normal;
            Status = Status.ToDo;
            Enabled = true;
            Deleted = false;
        }

        // COMMON PROPERTIES
        public bool Deleted { get; set; }
        public bool Enabled { get; set; }

        // SPECIFIC PROPERTIES
        public Guid TaskId { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime? DueDate { get; set; }
        public Priority Priority { get; set; }
        public Status Status { get; set; }

        public void ApplyEvent(
            [AggregateId("TaskId")] TaskCreatedEvent theEvent)
        {
            TaskId = theEvent.TaskId;
            Title = theEvent.Title;
            Description = theEvent.Description;
            DueDate = theEvent.DueDate;
            Priority = theEvent.Priority;
        }

        public static class Factory
        {
            public static Task NewTaskFrom(string title, string descrition, DateTime? dueDate = null, Priority priority = Priority.Normal)
            {
                var task = new Task();
                var created = new TaskCreatedEvent(Guid.NewGuid(), title, descrition, dueDate, priority);
                task.RaiseEvent(created);
                return task;
            }
        }
    }
}

12) 

